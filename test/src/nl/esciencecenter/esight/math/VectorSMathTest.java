package nl.esciencecenter.esight.math;


/* Copyright 2013 Netherlands eScience Center
 * 
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Expected values for assertions were generated by Wolfram Alpha
 * http://www.wolframalpha.com/
 * 
 * @author Maarten van Meersbergen <m.van.meersbergen@esciencecenter.nl>
 * 
 */
public class VectorSMathTest {

    // @Test
    // public final void testDotVecS2VecS2() {
    // VecS2 input1 = new VecS2((short) 3, (short) 2);
    // VecS2 input2 = new VecS2((short) 6, (short) 2);
    // float expected = (short) 22;
    // assertEquals((long) expected, VectorSMath.dot(input1, input2));
    //
    // input1 = new VecS2((short) 3, (short) 2);
    // input2 = new VecS2((short) 6, (short) 2);
    // expected = (short) 22;
    // assertEquals(expected, VectorSMath.dot(input1, input2));
    //
    // input1 = new VecS2((short) 1, (short) 1);
    // input2 = new VecS2((short) 6, (short) 2);
    // expected = (short) 8;
    // assertEquals(expected, VectorSMath.dot(input1, input2));
    //
    // input1 = new VecS2((short) 1, (short) 1);
    // input2 = new VecS2((short) 1, (short) 1);
    // expected = (short) 2;
    // assertEquals(expected, VectorSMath.dot(input1, input2));
    //
    // input1 = new VecS2((short) 0, (short) 0);
    // input2 = new VecS2((short) 1, (short) 1);
    // expected = (short) 0;
    // assertEquals(expected, VectorSMath.dot(input1, input2));
    //
    // }
    //
    // @Test
    // public final void testDotVecS3VecS3() {
    // VecS3 input1 = new VecS3((short) 3, (short) 2, (short) 5);
    // VecS3 input2 = new VecS3((short) 6, (short) 2, (short) 8);
    // float expected = (short) 62;
    // assertEquals(expected, VectorSMath.dot(input1, input2));
    //
    // input1 = new VecS3((short) 3, (short) 2, (short) 5);
    // input2 = new VecS3((short) 6, (short) 2, (short) 8);
    // expected = (short) 62;
    // assertEquals(expected, VectorSMath.dot(input1, input2));
    //
    // input1 = new VecS3((short) 1, (short) 1, (short) 1);
    // input2 = new VecS3((short) 6, (short) 2, (short) 8);
    // expected = (short) 6;
    // assertEquals(expected, VectorSMath.dot(input1, input2));
    //
    // input1 = new VecS3((short) 1, (short) 1, (short) 1);
    // input2 = new VecS3((short) 1, (short) 1, (short) 1);
    // expected = (short) 3;
    // assertEquals(expected, VectorSMath.dot(input1, input2));
    //
    // input1 = new VecS3((short) 0, (short) 0, (short) 0);
    // input2 = new VecS3((short) 1, (short) 1, (short) 1);
    // expected = (short) 0;
    // assertEquals(expected, VectorSMath.dot(input1, input2));
    // }
    //
    // @Test
    // public final void testDotVecS4VecS4() {
    // VecS4 input1 = new VecS4((short) 3, (short) 2, (short) 5, (short) 1);
    // VecS4 input2 = new VecS4((short) 6, (short) 2, (short) 8, (short) 0);
    // float expected = (short) 72;
    // assertEquals(expected, VectorSMath.dot(input1, input2));
    //
    // input1 = new VecS4((short) 3, (short) 2, (short) 5, (short) 1);
    // input2 = new VecS4((short) 6, (short) 2, (short) 8, (short) 0);
    // expected = (short) 72;
    // assertEquals(expected, VectorSMath.dot(input1, input2));
    //
    // input1 = new VecS4((short) 1, (short) 1, (short) 1, (short) 1);
    // input2 = new VecS4((short) 6, (short) 2, (short) 8, (short) 0);
    // expected = (short) 6;
    // assertEquals(expected, VectorSMath.dot(input1, input2));
    //
    // input1 = new VecS4((short) 1, (short) 1, (short) 1, (short) 1);
    // input2 = new VecS4((short) 1, (short) 1, (short) 1, (short) 1);
    // expected = (short) 4;
    // assertEquals(expected, VectorSMath.dot(input1, input2));
    //
    // input1 = new VecS4((short) 0, (short) 0, (short) 0, (short) 0);
    // input2 = new VecS4((short) 1, (short) 1, (short) 1, (short) 1);
    // expected = (short) 0;
    // assertEquals(expected, VectorSMath.dot(input1, input2));
    // }
    //
    // @Test
    // public final void testLengthVecS2() {
    // VecS2 input1 = new VecS2((short) 3, (short) 2);
    // float expected = (short) 360555;
    // assertEquals(expected, VectorSMath.length(input1));
    //
    // input1 = new VecS2((short) 3, (short) 2);
    // expected = (short) 360555;
    // assertEquals(expected, VectorSMath.length(input1));
    //
    // input1 = new VecS2((short) 1, (short) 1);
    // expected = (float) Math.sqrt(2.0);
    // assertEquals(expected, VectorSMath.length(input1));
    //
    // input1 = new VecS2((short) 1, (short) 0);
    // expected = (short) 1;
    // assertEquals(expected, VectorSMath.length(input1));
    //
    // input1 = new VecS2((short) 0, (short) 0);
    // expected = (short) 0;
    // assertEquals(expected, VectorSMath.length(input1));
    // }
    //
    // @Test
    // public final void testLengthVecS3() {
    // VecS3 input1 = new VecS3((short) 3, (short) 2, (short) 5);
    // float expected = (short) 616441;
    // assertEquals(expected, VectorSMath.length(input1));
    //
    // input1 = new VecS3((short) 3, (short) 2, (short) 5);
    // expected = (short) 616441;
    // assertEquals(expected, VectorSMath.length(input1));
    //
    // input1 = new VecS3((short) 1, (short) 1, (short) 1);
    // expected = (float) Math.sqrt(3.0);
    // assertEquals(expected, VectorSMath.length(input1));
    //
    // input1 = new VecS3((short) 1, (short) 0, (short) 0);
    // expected = (short) 1;
    // assertEquals(expected, VectorSMath.length(input1));
    //
    // input1 = new VecS3((short) 0, (short) 0, (short) 0);
    // expected = (short) 0;
    // assertEquals(expected, VectorSMath.length(input1));
    // }
    //
    // @Test
    // public final void testLengthVecS4() {
    // VecS4 input1 = new VecS4((short) 3, (short) 2, (short) 5, (short) 1);
    // float expected = (short) 6245;
    // assertEquals(expected, VectorSMath.length(input1));
    //
    // input1 = new VecS4((short) 3, (short) 2, (short) 5, (short) 1);
    // expected = (short) 6245;
    // assertEquals(expected, VectorSMath.length(input1));
    //
    // input1 = new VecS4((short) 1, (short) 1, (short) 1, (short) 1);
    // expected = (float) Math.sqrt(4.0);
    // assertEquals(expected, VectorSMath.length(input1));
    //
    // input1 = new VecS4((short) 1, (short) 0, (short) 0, (short) 0);
    // expected = (short) 1;
    // assertEquals(expected, VectorSMath.length(input1));
    //
    // input1 = new VecS4((short) 0, (short) 0, (short) 0, (short) 0);
    // expected = (short) 0;
    // assertEquals(expected, VectorSMath.length(input1));
    // }
    //
    // @Test
    // public final void testNormalizeVecS2() {
    // VecS2 input1 = new VecS2((short) 3, (short) 2);
    // VecS2 expected = new VecS2((short) 8320503, (short) 5547002);
    // assertEquals(expected, VectorSMath.normalize(input1));
    //
    // input1 = new VecS2((short) 3, (short) 2);
    // expected = new VecS2((short) 8320503, (short) 5547002);
    // assertEquals(expected, VectorSMath.normalize(input1));
    //
    // input1 = new VecS2((short) 1, (short) 1);
    // expected = new VecS2((short) 70710677, (short) 70710677);
    // assertEquals(expected, VectorSMath.normalize(input1));
    //
    // input1 = new VecS2((short) 1, (short) 0);
    // expected = new VecS2((short) 1, (short) 0);
    // assertEquals(expected, VectorSMath.normalize(input1));
    //
    // input1 = new VecS2((short) 0, (short) 0);
    // expected = new VecS2((short) 0, (short) 0);
    // assertEquals(expected, VectorSMath.normalize(input1));
    // }
    //
    // @Test
    // public final void testNormalizeVecS3() {
    // VecS3 input1 = new VecS3((short) 3, (short) 2, (short) 5);
    // VecS3 expected = new VecS3((short) 48666432, (short) 32444286, (short)
    // 81110716);
    // assertEquals(expected, VectorSMath.normalize(input1));
    //
    // input1 = new VecS3((short) 3, (short) 2, (short) 5);
    // expected = new VecS3((short) 48666432, (short) 32444286, (short)
    // 81110716);
    // assertEquals(expected, VectorSMath.normalize(input1));
    //
    // input1 = new VecS3((short) 1, (short) 1, (short) 1);
    // expected = new VecS3((short) 57735026, (short) 57735026, (short)
    // 57735026);
    // assertEquals(expected, VectorSMath.normalize(input1));
    //
    // input1 = new VecS3((short) 1, (short) 0, (short) 0);
    // expected = new VecS3((short) 1, (short) 0, (short) 0);
    // assertEquals(expected, VectorSMath.normalize(input1));
    //
    // input1 = new VecS3((short) 0, (short) 0, (short) 0);
    // expected = new VecS3((short) 0, (short) 0, (short) 0);
    // assertEquals(expected, VectorSMath.normalize(input1));
    // }
    //
    // @Test
    // public final void testNormalizeVecS4() {
    // VecS4 input1 = new VecS4((short) 3, (short) 2, (short) 5, (short) 1);
    // VecS4 expected = new VecS4((short) 48038447, (short) 32025632, (short)
    // 80064076, (short) 16012816);
    // assertEquals(expected, VectorSMath.normalize(input1));
    //
    // input1 = new VecS4((short) 3, (short) 2, (short) 5, (short) 1);
    // expected = new VecS4((short) 48038447, (short) 32025632, (short)
    // 80064076, (short) 16012816);
    // assertEquals(expected, VectorSMath.normalize(input1));
    //
    // input1 = new VecS4((short) 1, (short) 1, (short) 1, (short) 1);
    // expected = new VecS4((short) 5, (short) 5, (short) 5, (short) 5);
    // assertEquals(expected, VectorSMath.normalize(input1));
    //
    // input1 = new VecS4((short) 1, (short) 0, (short) 0, (short) 0);
    // expected = new VecS4((short) 1, (short) 0, (short) 0, (short) 0);
    // assertEquals(expected, VectorSMath.normalize(input1));
    //
    // input1 = new VecS4((short) 0, (short) 0, (short) 0, (short) 0);
    // expected = new VecS4((short) 0, (short) 0, (short) 0, (short) 0);
    // assertEquals(expected, VectorSMath.normalize(input1));
    // }
    //
    // @Test
    // public final void testCrossVecS3VecS3() {
    // VecS3 input1 = new VecS3((short) 3, (short) 2, (short) 5);
    // VecS3 input2 = new VecS3((short) 6, (short) 2, (short) 8);
    // VecS3 expected = new VecS3((short) 06000001, (short) 060000002, (short)
    // 060000002);
    // assertEquals(expected, VectorSMath.cross(input1, input2));
    //
    // input1 = new VecS3((short) 3, (short) 2, (short) 5);
    // input2 = new VecS3((short) 6, (short) 2, (short) 8);
    // expected = new VecS3((short) 06000001, (short) 060000002, (short)
    // 060000002);
    // assertEquals(expected, VectorSMath.cross(input1, input2));
    //
    // input1 = new VecS3((short) 1, (short) 1, (short) 1);
    // input2 = new VecS3((short) 6, (short) 2, (short) 8);
    // expected = new VecS3((short) 6, (short) 19999999, (short) 40000004);
    // assertEquals(expected, VectorSMath.cross(input1, input2));
    //
    // input1 = new VecS3((short) 1, (short) 1, (short) 1);
    // input2 = new VecS3((short) 1, (short) 1, (short) 1);
    // expected = new VecS3();
    // assertEquals(expected, VectorSMath.cross(input1, input2));
    //
    // input1 = new VecS3((short) 0, (short) 0, (short) 0);
    // input2 = new VecS3((short) 1, (short) 1, (short) 1);
    // expected = new VecS3();
    // assertEquals(expected, VectorSMath.cross(input1, input2));
    // }
    //
    // @Test
    // public final void testCrossVecS4VecS4() {
    // VecS4 input1 = new VecS4((short) 3, (short) 2, (short) 5, (short) 1);
    // VecS4 input2 = new VecS4((short) 6, (short) 2, (short) 8, (short) 0);
    // VecS4 expected = new VecS4((short) 06000001, (short) 060000002, (short)
    // 060000002, (short) 0);
    // assertEquals(expected, VectorSMath.cross(input1, input2));
    //
    // input1 = new VecS4((short) 3, (short) 2, (short) 5, (short) 1);
    // input2 = new VecS4((short) 6, (short) 2, (short) 8, (short) 0);
    // expected = new VecS4((short) 06000001, (short) 060000002, (short)
    // 060000002, (short) 0);
    // assertEquals(expected, VectorSMath.cross(input1, input2));
    //
    // input1 = new VecS4((short) 1, (short) 1, (short) 1, (short) 1);
    // input2 = new VecS4((short) 6, (short) 2, (short) 8, (short) 0);
    // expected = new VecS4((short) 6, (short) 19999999, (short) 40000004,
    // (short) 0);
    // assertEquals(expected, VectorSMath.cross(input1, input2));
    //
    // input1 = new VecS4((short) 1, (short) 1, (short) 1, (short) 1);
    // input2 = new VecS4((short) 1, (short) 1, (short) 1, (short) 1);
    // expected = new VecS4();
    // assertEquals(expected, VectorSMath.cross(input1, input2));
    //
    // input1 = new VecS4((short) 0, (short) 0, (short) 0, (short) 0);
    // input2 = new VecS4((short) 1, (short) 1, (short) 1, (short) 1);
    // expected = new VecS4();
    // assertEquals(expected, VectorSMath.cross(input1, input2));
    // }
    //
    // @Test
    // public final void testToBufferFloatArray() {
    // fail("Not yet implemented"); // TODO
    // }
    //
    // @Test
    // public final void testToBufferVecS2Array() {
    // fail("Not yet implemented"); // TODO
    // }
    //
    // @Test
    // public final void testToBufferVecS3Array() {
    // fail("Not yet implemented"); // TODO
    // }
    //
    // @Test
    // public final void testToBufferVecS4Array() {
    // fail("Not yet implemented"); // TODO
    // }
    //
    // @Test
    // public final void testListToBuffer() {
    // fail("Not yet implemented"); // TODO
    // }
    //
    // @Test
    // public final void testVec2ListToBuffer() {
    // fail("Not yet implemented"); // TODO
    // }
    //
    // @Test
    // public final void testVec3ListToBuffer() {
    // fail("Not yet implemented"); // TODO
    // }
    //
    // @Test
    // public final void testVec4ListToBuffer() {
    // fail("Not yet implemented"); // TODO
    // }

}
